/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Help.java
 *
 * Created on 05.11.2010, 09:19:03
 */


/**
 *
 * @author Coolo
 */
public class Help extends javax.swing.JFrame {
    public static  int HELP_ATTRIBUTES=1001;
    public static  int HELP_METHODS=1002;
    public static  int HELP_ASSOCIATIONS=1003;
    public static  int HELP_ARRAYS=1004;
    public static  int HELP_GENERICS=1005;
    public static  int HELP_STATICS=1006;
    public static  int HELP_INFORMATIONHIDING=1007;
    public static  int HELP_CONSTRUCTORS=1008;
    public static  int HELP_COMMENTS=1009;
    public static  int HELP_CLASS=1010;
    public static  int HELP_OPENCLASS=1011;
    /** Creates new form Help */
    public Help(int typ) {
        String txt="";
        initComponents();
        if (typ == HELP_ATTRIBUTES) {
            txt="You define attributes with +/-/# name of the attribute : datatype of the attribute\nThey can also be static\n\nExample:\n\t -anAttribute:String";
        } else if (typ == HELP_METHODS) {
            txt="You define methods with +/-/# name of the method ( name of parameter:datatype of parameter,... ):datatype of method\nThe can also be static\n\nExample:\n\t +myMethod(param1:int, param2:String, param3:int[*], param3:ArrayList<String>):String[*]";
        } else if (typ==HELP_ASSOCIATIONS) {
            txt="You open the association diagram with the button 'View Association' in the 'File' menu.\n In the window you see every association.";
        } else if (typ==HELP_ARRAYS) {
            txt="Every datatype can be an array, you can also combine it with generics. You add [*] for every dimension. \nFor a two dimensional array, write [*][*].\n\nExample:\n\t-myArray:int[*]";
        } else if (typ==HELP_GENERICS) {
            txt="Every datatype can be a generic, you can also combine it with arrays. You simple write generics like  you do in java. \n\nExample:\n\tExample:-myGeneric:HashMap<String, Object>";
        } else if (typ==HELP_STATICS) {
            txt="If you want a static method or attribute, simple write a '_' as prefix. So the member gets into a static member. \n\nExample:\n\t-_myAttribute:int";
        } else if (typ==HELP_INFORMATIONHIDING) {
            txt="Every member and the class can be private(-),public(+) or protected(#). \nYou just write one of them at first. Members MUST have this prefix but in classnames it is optional. \n\nExample:\n\t+attribute:int";
        } else if (typ==HELP_CONSTRUCTORS) {
            txt="You define constructors, like you do methods. You just add 'new ' into the methodname. Constructors MUSTN'T have a datatype.\nThey MUSTN'T be static.\n\nExample:\n\t+new myClass(att1:int,att2:int)";
        } else if (typ==HELP_COMMENTS) {
            txt="Every text which does not begins with +,- or # will be ignored.";
        } else if (typ==HELP_CLASS) {
            txt="The first word, is the classname (which is red). After that you can write every member you want.";
        } else if (typ==HELP_OPENCLASS) {
            txt="In the association diagram, you can click on classnames. If they exist in the directory of the uml file the specified class opens in a new window.";
        }
        jTextArea1.setText(txt);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setTitle("Help");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Help(0).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

}
